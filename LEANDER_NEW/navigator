import math
from gps3 import gps3

lat2 = 13.347841667
lon2 = 74.792141667
lat1 = 0.0000000
lon1 = 0.0000000





def haversine(lat1, lon1, lat2, lon2):
    # distance between latitudes
    # and longitudes
    dLat = (lat2 - lat1) * math.pi / 180.0
    dLon = (lon2 - lon1) * math.pi / 180.0

    # convert to radians
    lat1 = (lat1) * math.pi / 180.0
    lat2 = (lat2) * math.pi / 180.0

    # apply formulae
    a = (pow(math.sin(dLat / 2), 2) +
         pow(math.sin(dLon / 2), 2) *
         math.cos(lat1) * math.cos(lat2))
    rad = 6378.1*1000
    c = 2 * math.asin(math.sqrt(a))
    print((rad * c),"M")

def bearing(lat1, lon1, lat2, lon2):
    dLon = lon2 - lon1
    y = math.sin(dLon) * math.cos(lat2)
    x = math.cos(lat1) * math.sin(lat2) \
        - math.sin(lat1) * math.cos(lat2) * math.cos(dLon)

    degree = math.atan2(y, x) * 180 / math.pi

    if degree < 0:
        degree += 360
    print(degree)


gps_socket = gps3.GPSDSocket()
data_stream = gps3.DataStream()
gps_socket.connect()
gps_socket.watch()
for new_data in gps_socket:
    if new_data:
        data_stream.unpack(new_data)
        lat1= data_stream.TPV['lat']
        lon1= data_stream.TPV['lon']
        if lat1 == 'n/a':
            continue
        if lon1 == 'n/a':
            continue

        bearing(lat1, lon1, lat2, lon2)
        haversine(lat1, lon1, lat2, lon2)

